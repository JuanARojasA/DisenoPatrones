Microservicios:
Mientras que SOA es un concepto general y puede significar muchas cosas, la arquitectura de microservicios describe un modo particular de construir aplicaciones con servicios muy pequeños, cada uno de los cuales se enfoca en hacer sólo una cosa bien.

En primer lugar, como los aplicativos son cada vez más complejos, la arquitectura monolítica tradicional ya no cumple con las necesidades de escalabilidad y ciclo de desarrollo rápido (en la siguiente sección veremos cómo los microservicios lo hacen posible). En segundo lugar, el éxito de grandes compañías de Internet, principalmente Netflix, al implementar la arquitectura de microservicios, es una gran motivación para que otras empresas consideren hacer el cambio.

En la arquitectura de microservicios, la aplicación monolítica se descompone en múltiples servicios pequeños, granulares, aislados, independientes y distribuibles. El hecho de que estos servicios se desacoplen por separado es trascendental, pues permite priorizar los recursos escasos a los microservicios más relevantes, sobre los demás. Estos servicios pueden ser desarrollados en paralelo, por diversos equipos, usando las tecnologías más adecuadas para cumplir con sus propósitos. También, como se desacoplan por aparte, pueden ser escalados de manera independiente. Por ejemplo, un servicio que consume mucha CPU pero no necesita tanta memoria puede ser escalado en servidores equipados con un procesador potente pero con menor memoria.  Podemos escalar solamente los servicios que deseamos, no es necesario escalarlos todos.


Si los servicios son independientes y aislados, ¿cómo compartir código entre ellos? Bueno, es cuestión de encontrar el punto de equilibrio. Lo positivo de compartir código entre servicios es que permite reutilizar funcionalidades existentes y mantener el principio DRY (no escribir código duplicado), lo negativo es que aumenta el acoplamiento entre los servicios. Una solución es compartir solamente las librerías de utilidades técnicas y las de funcionalidades comunes, estas se pueden configurar como servicios independientes a los cuales otros servicios pueden llamar. Entonces, el siguiente punto a resolver a continuación es la comunicación entre servicios.

La comunicación entre estos microservicios puede implementarse de dos maneras, mediante peticiones HTTP y a través de cola de mensajes (Azure Service Bus, RabbitMQ, Kafka Apache, etc.). Básicamente, HTTP es comunicación directa y debe usarse cuando se desea una respuesta inmediata del otro servicio. Por otra parte, el mecanismo publicación/suscripción de la cola de mensaje tiende a ser asíncrono.

Finalmente, como los servicios son muy granulares, las aplicaciones cliente generalmente necesitan interactuar con múltiples servicios para obtener los datos que necesitan. Para permitir cambios en los servicios sin afectar a los clientes, se utiliza una API Gateway. API Gateway es una capa abstracta que oculta a todos los microservicios, dejando un único Endpoint para que los clientes se comuniquen. Las solicitudes que lleguen al Gateway serán procesadas/enrutadas hacia los servicios específicos. El Gateway también nos permite monitorear fácilmente el tráfico y uso de los servicios.

Ventajas:
Mientras que la arquitectura monolítica funciona bien en escenarios tradicionales, en el mundo de hoy, donde las aplicaciones necesitan desplegar nuevas funcionalidades frecuentemente (en términos de horas) y estar siempre en línea con alta disponibilidad, este estilo arquitectónico no cumple con las expectativas. Un cambio sencillo en un componente requiere pruebas de regresión, recompilar y volver a desplegar toda la aplicación. Y dado que todo se ejecuta en el mismo proceso, una excepción no controlada puede afectar todo el sistema monolítico.

Por el contrario, la arquitectura de microservicios es mucho más flexible y resistente:

1. Los servicios en sí son muy simples de construir, pues se centran en hacer solamente una cosa bien, de forma que son fáciles de probar y se puede asegurar mayor calidad.

2. Cada servicio puede construirse con las tecnologías y herramientas más adecuadas, permitiendo “Polyglot Programming” (las aplicaciones se deben escribir en una mezcla de lenguajes para explotar sus mejores características). La elección inicial de una tecnología no nos debería limitar durante el ciclo de vida del proyecto.

3. Múltiples equipos de desarrolladores pueden trabajar independientemente bajo esta arquitectura. Esto es ideal para lograr el “continuous delivery”, pues permite actualizaciones frecuentes mientras el resto del sistema se mantiene estable.

4. En el caso que un servicio deje de funcionar, solo afectará las partes que dependen directamente de él (si las hay). El resto seguirá funcionando bien.

Serverless:
Es una forma de construir y desplegar aplicaciones con filosofía Cloud, sus principales beneficios son que no tienes ni necesitas máquinas virtuales (ni en IaaS ni en PaaS) para hacerlo tu aplicación.

La idea principal consiste en utilizar servicios orientados a funciones (como AWS Lambda o Azure Functions) para trocear tu aplicación en pequeñas unidades funcionales de código, cada una de ellas es almacenada en alguno de estos SaaS y por delante debes poner un Proxy/Router/Balanceador (como AWS Gateway). 

Un a cosa interesante de estos servicios es que se cobra por por segundo de ejecución (comparado al cobro por hora de ejecución de EC2 o Azure VMS, o minutos en Google Compute Engine), además del tamaño de la función (en MB RAM).

Estos servicios en la nube permiten construir una aplicación RESTful, sin tener máquinas ni preocuparnos por autoescalar, ya que estos servicios se encargan de hacer todas estas operaciones necesarias.


¿Qué es la serverless?
La informática sin servidor le permite crear y ejecutar aplicaciones y servicios sin preocuparse de los servidores. Las aplicaciones sin servidor no requieren que aprovisione, escale ni administre ningún servidor. Puede crearlas para prácticamente cualquier tipo de aplicación o servicio backend. Además, usted administra todo lo necesario para ejecutar y escalar la aplicación con alta disponibilidad.

¿Por qué usar serverless?
La creación de aplicaciones sin servidor implica que sus desarrolladores se pueden centrar en el producto principal en lugar de preocuparse de la administración y el uso de los servidores, o los tiempos de ejecución, tanto en la nube como de forma local. Gracias a esta reducción de carga, los desarrolladores pueden emplear su tiempo y energía en desarrollar productos increíbles que sean de confianza y se puedan escalar.
¿Cuáles son los beneficios de la informática sin servidor?
Las aplicaciones sin servidor tienen tres beneficios principales.

- No hay que administrar servidores
- Escalado flexible
- Alta disponibilidad automatizada